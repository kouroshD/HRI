<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>planner: src/CallBackClass.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../endor.jpg"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">planner
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">C++ library to create and navigate AND-OR graphs</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CallBackClass.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * CallBackClass.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *  Created on: May 02, 2016</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *      Author: Kourosh Darvish</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;CallBackClass.hpp&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;CallBackClass::CallBackClass(<span class="keywordtype">int</span> NoParameterHMP1,<span class="keywordtype">int</span> NoOutputHMP1) {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    HMP_cognition_flag          =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    HMP_ack_flag                =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    HMP_initial_command_flag    =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    control_ack_flag[0]         =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    control_ack_flag[1]         =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    control_ack_flag[2]         =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    rec_human_action_flag       =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    control_initial_command_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    HMP_parameter_cognition_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    hri_control_goal_flag[0]    =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    hri_control_goal_flag[1]    =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    hri_control_goal_flag[2]    =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    rob_goal_reach_flag[0]      =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    rob_goal_reach_flag[1]      =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    rob_goal_reach_flag[2]      =<span class="keyword">true</span>;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    sub_HMPAck  =nh.subscribe(<span class="stringliteral">&quot;HMPAck&quot;</span>,80, &amp;CallBackClass::HMPAckCallBack, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    sub_HMPOut  =nh.subscribe(<span class="stringliteral">&quot;HMPOutput&quot;</span>,1, &amp;CallBackClass::HMPOutputCallBack, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    sub_HRecAction  =nh.subscribe(<span class="stringliteral">&quot;HRecAction&quot;</span>,1, &amp;CallBackClass::HRecActionCallBack, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    sub_CtrlAck =nh.subscribe(<span class="stringliteral">&quot;hri_robot_ack&quot;</span>,80, &amp;CallBackClass::RobotAckCallBack, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    sub_CtrlOut =nh.subscribe(<span class="stringliteral">&quot;controlOutput&quot;</span>,1, &amp;CallBackClass::ControlOutputCallBack, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">//  sub_JntSt   =nh.subscribe(&quot;robot/joint_states&quot;,1, &amp;CallBackClass::RobotJointStatesCallBack, this);</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">//  sub_LGrip   =nh.subscribe(&quot;robot/end_effector/left_gripper/state&quot;,1,&amp;CallBackClass::RobotLeftGripperStatesCallBack, this);</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">//  sub_RGrip   =nh.subscribe(&quot;robot/end_effector/right_gripper/state&quot;,1,&amp;CallBackClass::RobotRightGripperStatesCallBack, this);</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    NoParameterHMP=NoParameterHMP1;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    parameterHMP=<span class="keyword">new</span> <span class="keywordtype">string</span> [NoParameterHMP];</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii=0;ii&lt;NoParameterHMP;ii++)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {   parameterHMP[ii]=<span class="stringliteral">&quot;0&quot;</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    recognized_action_human=<span class="stringliteral">&quot;0&quot;</span>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    NoOutputHMP=NoOutputHMP1;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    HMPOutput=<span class="keyword">new</span> <span class="keywordtype">float</span>[NoOutputHMP];</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii=0;ii&lt;NoOutputHMP;ii++)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {   HMPOutput[ii]=0.0;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">//  HMP</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">void</span> CallBackClass::HMPAckCallBack(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg) {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    ROS_INFO(<span class="stringliteral">&quot;I heard HMP Ack: [%s]&quot;</span>, msg-&gt;data.c_str());</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(HMP_initial_command_flag==<span class="keyword">false</span>) {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;HMP Initial Flag is: &quot;&lt;&lt;HMP_initial_command_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        HMP_initial_command_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;I changed HMP Initial Flag to: &quot;&lt;&lt;HMP_initial_command_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">string</span> MSG=msg-&gt; data.c_str();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="comment">//string parameterHMP[NoParameterHMP];</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        istringstream ss (MSG);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        copy(</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                istream_iterator &lt;string&gt;(ss),</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                istream_iterator &lt;string&gt; (),</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                parameterHMP);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">//      cout&lt;&lt;&quot;I heard this msg:\t&quot;;</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">//      for (int jj=0; jj&lt;NoParameterHMP;jj++)</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">//          cout&lt;&lt;&quot;parameterHMP[&quot;&lt;&lt;jj&lt;&lt;&quot;]: &quot;&lt;&lt;parameterHMP[jj]&lt;&lt;&quot; \t&quot;;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">//      cout&lt;&lt;endl;</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">// if successful having data change to true, otherwise still be false.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;HMP Ack Flag is: &quot;&lt;&lt;HMP_ack_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        HMP_ack_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        HMP_parameter_cognition_flag=<span class="keyword">false</span>;<span class="comment">// related to HMP-cognition flag;</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;I changed the HMP Ack Flag to: &quot;&lt;&lt;HMP_ack_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keywordtype">void</span> CallBackClass::HMPOutputCallBack(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">//cout&lt;&lt;&quot;=====================================================================&quot;&lt;&lt;endl;</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">//ROS_INFO(&quot;I heard HMP Output: [%s]&quot;, msg-&gt;data.c_str());</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">string</span> MSG=msg-&gt; data.c_str();</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">//float</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ii=0;ii&lt;NoOutputHMP;ii++)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        HMPOutput[ii]=0.0;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    istringstream ss (MSG);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    copy(</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            istream_iterator &lt;float&gt;(ss),</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            istream_iterator &lt;float&gt; (),</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            HMPOutput);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">//cout&lt;&lt;&quot;I heard this msg in callback HMP Output:\t&quot;;</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">//for (int jj=0; jj&lt;NoOutputHMP;jj++)</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">//cout&lt;&lt;HMPOutput[jj]&lt;&lt;&quot;\t&quot;;</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">//cout&lt;&lt;endl;</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    HMP_cognition_flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordtype">void</span> CallBackClass::HRecActionCallBack(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    recognized_action_human=msg-&gt; data.c_str();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    rec_human_action_flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">// Control</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keywordtype">void</span> CallBackClass::RobotAckCallBack(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    ROS_INFO(<span class="stringliteral">&quot;I heard Control Ack: [%s]&quot;</span>, msg-&gt;data.c_str());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">string</span> hri_control_ack_msg;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    hri_control_ack_msg=msg-&gt;data.c_str();</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">//  if(control_initial_command_flag==false) {</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;Control Initial Flag is: &quot;&lt;&lt;control_initial_command_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;Control Initial msg: &quot;&lt;&lt;hri_control_ack_msg&lt;&lt;endl;</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">//      control_initial_command_flag=true;</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;I changed Control Initial Flag to: &quot;&lt;&lt;control_initial_command_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">//  }</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">//  else {</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;Control Ack Flag 0 is: &quot;&lt;&lt;control_ack_flag[0]&lt;&lt;endl;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">//      cout&lt;&lt; &quot;----------&gt;&gt;&gt;&gt;Control Ack Flag 1 is: &quot;&lt;&lt;control_ack_flag[1]&lt;&lt;endl;</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">//hri_control_goal_flag=false;</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">//      if (hri_control_ack_msg==&quot;hri_control_command_recieved_left&quot;){// maybe can be commented!</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">//          hri_control_goal_flag[0]=false;</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">//          control_ack_flag[0]=true;</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span><span class="comment">//</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">//      else if (hri_control_ack_msg==&quot;hri_control_command_recieved_right&quot;){// maybe can be commented!</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">//          hri_control_goal_flag[1]=false;</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">//          control_ack_flag[1]=true;</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">if</span> (hri_control_ack_msg==<span class="stringliteral">&quot;GoalReachedLeft&quot;</span>)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            rob_goal_reach_flag[0]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            hri_control_goal_flag[0]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hri_control_ack_msg==<span class="stringliteral">&quot;GoalReachedRight&quot;</span>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            rob_goal_reach_flag[1]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            hri_control_goal_flag[1]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hri_control_ack_msg==<span class="stringliteral">&quot;GoalReachedBiManual&quot;</span>)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            rob_goal_reach_flag[2]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            hri_control_goal_flag[2]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hri_control_ack_msg==<span class="stringliteral">&quot;RobotTaskReached&quot;</span>){<span class="comment">// maybe can be commented!</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            control_ack_flag[0]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">//  }</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keywordtype">void</span> CallBackClass::ControlOutputCallBack(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg) {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">//  ROS_INFO(&quot;I heard Control Output: [%s]&quot;, msg-&gt;data.c_str());</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">//  BAXTER</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">void CallBackClass::RobotJointStatesCallBack(sensor_msgs::JointState stateMsg) {</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">    float jointPositionVectror=stateMsg.position[1];</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">void CallBackClass::RobotLeftGripperStatesCallBack(const baxter_core_msgs::EndEffectorState::ConstPtr&amp; stateMsg) {</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">void CallBackClass::RobotRightGripperStatesCallBack(const baxter_core_msgs::EndEffectorState::ConstPtr&amp; stateMsg) {</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">*/</span></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Sep 21 2017 11:52:31 for planner by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
