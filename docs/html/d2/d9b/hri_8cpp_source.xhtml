<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>planner: src/hri.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../endor.jpg"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">planner
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">C++ library to create and navigate AND-OR graphs</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">hri.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//============================================================================</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Name        : hri.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// Author      : Kourosh Darvish</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Version     :</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// Copyright   : Your copyright notice</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// Description : Hello World in C++, Ansi-style</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//============================================================================</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;ros/ros.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;sensor_msgs/JointState.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;std_msgs/Char.h&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;std_msgs/String.h&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;ros/callback_queue.h&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;sys/stat.h&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;aonode.h&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;aograph.h&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;CallBackClass.hpp&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;endorAction.hpp&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/algorithm/string.hpp&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// cout colors and options:</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#define RST  &quot;\x1B[0m&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define KBLU  &quot;\x1B[34m&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define KRED  &quot;\x1B[31m&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define KGRN  &quot;\x1B[32m&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define FBLU(x) KBLU x RST</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define FRED(x) KRED x RST</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define FGRN(x) KGRN x RST</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define BOLD(x) &quot;\x1B[1m&quot; x RST</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span><span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">//void Read_2D_TXT_FILE(string file_path,string delim_type,std::vector&lt;std::vector&lt;std::string&gt;&gt; &amp; Result){</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">//  cout&lt;&lt;&quot;==============&quot;&lt;&lt;file_path&lt;&lt;&quot;==============&quot;&lt;&lt;endl;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">//    ifstream file_path_ifStr(file_path.c_str());</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">//    std::vector&lt;std::string&gt; line_list;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">//    string line;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span><span class="comment">//    if (file_path_ifStr.is_open()){</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">//      while(getline(file_path_ifStr,line)){</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span><span class="comment">//          boost::split(line_list, line, boost::is_any_of(delim_type));</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">//          Result.push_back(line_list);</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">//      file_path_ifStr.close();</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">//    }</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span><span class="comment">//</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">//    for (int m=0;m&lt;Result.size();m++){</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">//      for (int n=0;n&lt;Result[m].size();n++)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">//      cout&lt;&lt;Result[m][n]&lt;&lt;&quot; &quot;;</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">//      cout&lt;&lt;endl;</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">//    }</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">//};</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/*  struct timeval tp;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">    gettimeofday(&amp;tp, NULL);</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    unsigned long int ms0 ;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    ms0 = tp.tv_sec * 1000000 + tp.tv_usec ; // return the value in micro sec. (tv_sec:sec, tv_usec:micro second)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    microseconds ms_Gesture_time,ms_planning_start,ms_planning_stop, ms_robot_start, ms_robot_stop, ms_human_start, ms_human_stop, ms_assembly_start, ms_assembly_stop;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* home=getenv(<span class="stringliteral">&quot;HOME&quot;</span>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">string</span> path(home);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    path += <span class="stringliteral">&quot;/HRI/&quot;</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">string</span> hyperArc_action_path=path+<span class="stringliteral">&quot;Node_Action_List.txt&quot;</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">string</span> action_definition_path=path+<span class="stringliteral">&quot;Action_Def_List.txt&quot;</span>;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">//    string delim_type=&quot; &quot;;</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">//    std::vector&lt;std::vector&lt;std::string&gt;&gt; HA_action_list;</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">//    std::vector&lt;std::vector&lt;std::string&gt;&gt; action_DEF_list;</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">//    Read_2D_TXT_FILE(hyperArc_action_path,delim_type,HA_action_list);</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">//    Read_2D_TXT_FILE(action_definition_path,delim_type,action_DEF_list);</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">//ms_human_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">//system(&quot;canberra-gtk-play -f /home/nasa/Downloads/PickUp.wav&quot;);</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">//ms_human_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">//cout&lt;&lt;ms_human_start.count()&lt;&lt;endl&lt;&lt;ms_human_stop.count()&lt;&lt;endl;</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;*********************************************************&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;******************** Test 72 (Path:1) ********************&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;*********************************************************&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    ofstream Myfile1,Myfile2;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* DataLogPath =<span class="stringliteral">&quot;/home/nasa/Datalog/ICRA_TESTS&quot;</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">string</span> DataLogPath2     =<span class="stringliteral">&quot;/home/nasa/Datalog/ICRA_TESTS&quot;</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    mkdir(DataLogPath, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    Myfile1.open ((DataLogPath2+<span class="stringliteral">&quot;/73_Assembly_Timing.txt&quot;</span>).c_str(),ios::app);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    Myfile2.open ((DataLogPath2+<span class="stringliteral">&quot;/73_Gesture_Timing.txt&quot;</span>).c_str(),ios::app);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    ros::init(argc, argv, <span class="stringliteral">&quot;hri&quot;</span>);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    ros::NodeHandle nh;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    ros::Publisher pub_ctrl_cmnd=nh.advertise&lt;std_msgs::String&gt;(<span class="stringliteral">&quot;hri_robot_command&quot;</span>,80);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    ros::Publisher pub_ctrl_error=nh.advertise&lt;std_msgs::String&gt;(<span class="stringliteral">&quot;hri_control_error_check&quot;</span>,80);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// Arm left=0; Arm right=1;</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> NO_ARMS_STATE=3;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> NO_NODES=10;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> NO_NODE_ACTION_WIDTH=9;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> Number_of_Actions=28;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="../../d7/dd2/classendorActionClass.xhtml">endorActionClass</a> obj_nodeAction(NO_NODE_ACTION_WIDTH,NO_ARMS_STATE, action_definition_path, hyperArc_action_path);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std_msgs::String msg_ctrl_err;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">bool</span> control_error_flag=<span class="keyword">true</span>, control_error_stop_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std_msgs::String msg_ctrl_cmnd[NO_ARMS_STATE] ;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">bool</span> control_command_flag[NO_ARMS_STATE];</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">int</span> control_count[NO_ARMS_STATE], control_goal_count[NO_ARMS_STATE];</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        control_command_flag[i1]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        control_count[i1]=0;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        control_goal_count[i1]=0;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">int</span> rob_goal_reach_flag_counter=0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::stringstream ss_ctrl_cmnd;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Parameter Numbers of Controller and HMP</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordtype">int</span> noParamHMPInit=1;<span class="comment">//Initial HMP Parameters:      HMP type</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordtype">int</span> noParamHMP=1+4;<span class="comment">//Execution HMP Parameters       [0: set/get;    1-noOutputHMP:ModelsName; 4-4 Actions Parameters,]</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span>        <span class="keywordtype">int</span> noOutputHMP=4; <span class="comment">// Number of output from HMP</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">/* parameter and functions Initialization of the classes:*/</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">//obj_cognition.NoOutputHMP=noOutputHMP;</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">//  obj_cognition.NO_OUTPUT_HMP=noOutputHMP;</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="../../d1/dbb/classCallBackClass.xhtml">CallBackClass</a> obj_callback(noParamHMP,noOutputHMP);<span class="comment">// callback class of subscribers</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    obj_callback.NoOutputHMP=noOutputHMP;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">//obj_cognition.cognitionInit(noOutputHMP);</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordtype">int</span> noParamCtrlInit=2;<span class="comment">//Initial Control Parameters</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">int</span> noParamCtrl=6;<span class="comment">//Execution Control Parameters,       [1st: set/get, , 2-4: Actions Parameters,]</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">float</span> paramHMPInit [noParamHMPInit];<span class="comment">// Initial Parameters of HMP</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">float</span> paramHMP [noParamHMP];<span class="comment">//  Execution Parameters of HMP, first input: set Data: 1, or get Data:0</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">float</span> paramCtrlInit [noParamCtrlInit];<span class="comment">// Initial Parameters of Controller</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordtype">float</span> paramCtrl[noParamCtrl];<span class="comment">// first input: set Data: 1, or get Data:0</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">int</span> max_time_rob_reach_goal=30;<span class="comment">//sec</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">int</span> hri_ros_freq=80;<span class="comment">//hz</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    ros::Rate loop_rate(hri_ros_freq);<span class="comment">//Based on 2nd may discussion with Fulvio.</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">long</span> <span class="keywordtype">int</span> count=0;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    usleep(1e6);<span class="comment">//microsec, make the initialization.</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordtype">bool</span> HMP_command_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">bool</span> control_command_flag_1=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">bool</span> Human_Gesture_Flag=<span class="keyword">true</span>; <span class="comment">// false from gesture recognized, until check completely gesture</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">bool</span> Gesture_Flag_Resolved=<span class="keyword">true</span>;<span class="comment">// false only if R should do sth, instead human invade Robot action, this is false until robot stop</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">int</span> HMP_count=0;<span class="comment">// save count number for checking and changing flag</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">char</span> HMP_init_param_change, ctrl_init_param_change;<span class="comment">// check yes/no for changing initial questions of hmp/ctrl</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">int</span> HMP_type_no,ctrl_type_no, ctrl_mode_no; <span class="comment">// choosing type and mode of ctrl, hmp methods.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    cout&lt;&lt;BOLD(FGRN(<span class="stringliteral">&quot;Default Control Type is &#39;Task Priority&#39; &amp; Default Control Mode is &#39;Velocity&#39;&quot;</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="stringliteral">&quot; If it is OK Press &lt;y&gt;, Otherwise Press &lt;n&gt;: &quot;</span>));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    cin&gt;&gt;ctrl_init_param_change;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// If CTRL initial question:yes -&gt; initial ctrl flag to false.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">if</span> (ctrl_init_param_change==<span class="charliteral">&#39;n&#39;</span>){</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        obj_callback.control_initial_command_flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;Which Control Mode you want to use:&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;Velocity:\t press 1;&quot;</span>&lt;&lt;endl&lt;&lt;<span class="stringliteral">&quot;Torque:\t\t press 2;&quot;</span>&lt;&lt;endl&lt;&lt;<span class="stringliteral">&quot;Position:\t press 3: \t&quot;</span>;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        cin&gt;&gt;ctrl_mode_no;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;Which Control Type you want to use:&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;PID:\t\t press 1;&quot;</span>&lt;&lt;endl&lt;&lt;<span class="stringliteral">&quot;Force: \t\t press 2;&quot;</span>&lt;&lt;endl&lt;&lt;<span class="stringliteral">&quot;Robust:\t\t press 3;&quot;</span>&lt;&lt;endl</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                &lt;&lt;<span class="stringliteral">&quot;Nonlinear:\t press 4;&quot;</span>&lt;&lt;endl&lt;&lt;<span class="stringliteral">&quot;Adaptive:\t press 5;&quot;</span>&lt;&lt;endl&lt;&lt;<span class="stringliteral">&quot;MPC:\t\t press 6;\t&quot;</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        cin&gt;&gt;ctrl_type_no;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        paramCtrlInit[0]=ctrl_mode_no;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        paramCtrlInit[1]=ctrl_type_no;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Graph Name and Location</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">int</span> ambiguity_Number=0;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">int</span> cc=0;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">int</span> suggested_node_number=0, suggested_action_number=0;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">string</span> description = <span class="stringliteral">&quot;/home/nasa/catkin_ws/src/hri/include/assemblies/screwing_task.txt&quot;</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">string</span> graphName=<span class="stringliteral">&quot;screwing_task&quot;</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// AND/OR initialization</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="../../db/dbf/classAOgraph.xhtml">AOgraph</a> myGraph = <a class="code" href="../../db/dbf/classAOgraph.xhtml">AOgraph</a>(graphName);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    obj_nodeAction.solved_Node=myGraph.<a class="code" href="../../db/dbf/classAOgraph.xhtml#a45cf5748d787cfd255500471988479fc">loadFromFile</a>(description); <span class="comment">// initialization of the first to do;</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    obj_nodeAction.nodeFlag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">while</span> (ros::ok()) {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="comment">// when a node is solved, suggesting another node:</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span> (count&gt;5 &amp;&amp; obj_nodeAction.nodeFlag==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="comment">//set the node as solved:</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            cout&lt;&lt;<span class="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt; solved_Node: &quot;</span>&lt;&lt;obj_nodeAction.solved_Node&lt;&lt;endl;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            myGraph.<a class="code" href="../../db/dbf/classAOgraph.xhtml#ac3de5a6fa4472fac8eafbd1ba637c8bd">solveByName</a>(obj_nodeAction.solved_Node);<span class="comment">// (obj_nodeAction.solved_Node)</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="comment">//suggesting next node: 0/1</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">if</span> (obj_nodeAction.solved_Node==<span class="stringliteral">&quot;screwedPlate_finalPos&quot;</span>)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                ms_planning_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                Myfile1 &lt;&lt;ms_planning_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;PlanningStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                ms_assembly_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                Myfile1 &lt;&lt;ms_assembly_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;AssemblyStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                Myfile1.close();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                exit(1);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj_nodeAction.solved_Node==<span class="stringliteral">&quot;plate_initialPos&quot;</span>)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                ms_assembly_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                Myfile1 &lt;&lt;ms_assembly_start.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;AssemblyStart&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            obj_nodeAction.suggested_Node=myGraph.<a class="code" href="../../db/dbf/classAOgraph.xhtml#a8a50311dd164df031938b1556c6ea57d">suggestNext</a>(1);<span class="comment">//</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span>            obj_nodeAction.nodeListFunction();</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment">// when a action is solved, suggesting another action:</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">//cout&lt;&lt;&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;actionFlag: &quot;&lt;&lt;obj_nodeAction.actionFlag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span> (Human_Gesture_Flag==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            ms_planning_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            Myfile1 &lt;&lt;ms_planning_start.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;planningStart&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            obj_nodeAction.humanActionSearch(obj_callback.recognized_action_human,myGraph); <span class="comment">// recognized action</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            ms_planning_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            Myfile1 &lt;&lt;ms_planning_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;planningStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span> (obj_nodeAction.node_action_flag[1][0]==1 &amp;&amp; control_error_stop_flag==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                msg_ctrl_err.data=<span class="stringliteral">&quot;StopControlErrorCheck&quot;</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                control_error_flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                control_error_stop_flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordflow">if</span> (obj_nodeAction.responsible==<span class="stringliteral">&quot;H&quot;</span>)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            {   Gesture_Flag_Resolved=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="keywordflow">if</span>(obj_nodeAction.ambiguity_Number&gt;0)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    ms_human_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    Myfile1 &lt;&lt;ms_human_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;HumanStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj_nodeAction.responsible==<span class="stringliteral">&quot;R&quot;</span>)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                obj_nodeAction.robStopFunction();</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    msg_ctrl_cmnd[i1].data=obj_nodeAction.actionCommand[i1];</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    obj_callback.rob_goal_reach_flag[i1]=<span class="keyword">true</span>; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    obj_callback.hri_control_goal_flag[i1]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    control_command_flag[i1]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    cout&lt;&lt;<span class="stringliteral">&quot;POINT 10&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    Gesture_Flag_Resolved=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    <span class="comment">// it is not necessary here, because we said robot is started before, as the robot is responsible.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    ms_human_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    Myfile1 &lt;&lt;ms_human_start.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;HumanStart&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            Human_Gesture_Flag=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">//          cout&lt;&lt;&quot;node_action_flag:&quot;&lt;&lt;endl;</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">//          for (int g1=0;g1&lt;(obj_nodeAction.Number_of_Nodes);g1++)</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">//              {for (int f1=0;f1&lt;(obj_nodeAction.nodeActionList_width);f1++)// No of hyper arcs again, not the nodes?</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">//                  cout&lt;&lt;&quot;\t&quot;&lt;&lt;obj_nodeAction.node_action_flag[g1][f1];</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">//              cout&lt;&lt;endl;</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">//              }</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">if</span> (obj_nodeAction.actionFlag==<span class="keyword">false</span> &amp;&amp; Gesture_Flag_Resolved==<span class="keyword">true</span>)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            ms_planning_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            Myfile1 &lt;&lt;ms_planning_start.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;PlanningStart&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            obj_nodeAction.nodeActionListFunction();</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">if</span> (obj_nodeAction.nodeFlag==<span class="keyword">true</span>)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                obj_nodeAction.ActionListFunction();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                cout&lt;&lt;<span class="stringliteral">&quot;&gt;&gt; responsible: &quot;</span>&lt;&lt;obj_nodeAction.responsible&lt;&lt;endl;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                <span class="comment">//cout&lt;&lt;&quot;&gt;&gt; actionCommand: &quot;&lt;&lt;obj_nodeAction.actionCommand&lt;&lt;endl;</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                ms_planning_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                Myfile1 &lt;&lt;ms_planning_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;PlanningStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                <span class="keywordflow">if</span> (obj_nodeAction.responsible==<span class="stringliteral">&quot;H&quot;</span>)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    cout&lt;&lt;FBLU(<span class="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Human: &quot;</span>)&lt;&lt;obj_nodeAction.actionCommand[0]&lt;&lt;endl;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">//                  if (obj_nodeAction.actionCommand[0]==&quot;pickUp&quot;)</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">//                      system(&quot;canberra-gtk-play -f /home/nasa/Downloads/PickUp.wav&quot;);</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    ms_human_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    Myfile1 &lt;&lt;ms_human_start.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;HumanStart&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    <span class="keywordflow">if</span> (obj_nodeAction.actionCommand[0]==<span class="stringliteral">&quot;PickUp&quot;</span>)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        msg_ctrl_err.data=<span class="stringliteral">&quot;StartControlErrorCheck&quot;</span>;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        control_error_flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                        control_error_stop_flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj_nodeAction.responsible==<span class="stringliteral">&quot;R&quot;</span>)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <span class="comment">//make the control command flag false here;</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <span class="comment">//and assign the command for the controller here</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    ms_robot_start= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    Myfile1 &lt;&lt;ms_robot_start.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;RobotStart&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    cout&lt;&lt;<span class="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt; Robot: &quot;</span>&lt;&lt;obj_nodeAction.suggested_action&lt;&lt;endl;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        <span class="keywordflow">if</span> (obj_nodeAction.actionCommand[i1]!=<span class="stringliteral">&quot;0&quot;</span>)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                        {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                            cout&lt;&lt;<span class="stringliteral">&quot;000:obj_nodeAction.actionCommand[i1] &quot;</span>&lt;&lt;obj_nodeAction.actionCommand[i1]&lt;&lt;endl;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            msg_ctrl_cmnd[i1].data=obj_nodeAction.actionCommand[i1];</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                            control_command_flag[i1]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                        }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj_nodeAction.actionCommand[i1]==<span class="stringliteral">&quot;0&quot;</span>)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            obj_callback.rob_goal_reach_flag[i1]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            }</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">//*** HMP Cognition:</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="comment">// in this if condition we get the name of the actions coming from HMP-Detector:</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="comment">// if the action recognized by hmp reasoning == action suggested</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                <span class="comment">//previously by andorAction, it means it is solved and another action should be suggested</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="comment">// we should delete next if condition:</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">/*          if (obj_cognition.cognitionHMP_get()==obj_nodeAction.actionCommand[0])// human action just 0 now...</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">                obj_nodeAction.actionFlag=false;</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="comment">//  Human_Gesture_Flag=false;</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">if</span> (obj_callback.rec_human_action_flag == <span class="keyword">false</span> )<span class="comment">// maybe: check responsible: &quot;H&quot;</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        {   <span class="comment">// we change the class from  obj_cognition -&gt; obj_callback</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            cout&lt;&lt;<span class="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt; Recognized Action:\t&quot;</span>&lt;&lt;obj_callback.recognized_action_human&lt;&lt;endl;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            Human_Gesture_Flag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            obj_callback.rec_human_action_flag = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            ms_Gesture_time= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            Myfile2 &lt;&lt;ms_Gesture_time.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;obj_callback.recognized_action_human&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">//***   HMP     ***//</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">    // HMP Initial Parameters</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">        if (obj_callback.HMP_initial_command_flag==false) {</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">            obj_callback.NoParameterHMP=noParamHMPInit;</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">            std_msgs::String msg_HMPPar;</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">            std::stringstream ss_HMPPar;</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">            for (int ii=1; ii&lt;= noParamHMPInit; ii++) {</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">                ss_HMPPar&lt;&lt;paramHMPInit[ii-1];</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">            msg_HMPPar.data=ss_HMPPar.str();</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">            ROS_INFO(&quot;I publish HMP Initial command: %s&quot;,msg_HMPPar.data.c_str());</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">            pub_HMP_cmnd.publish(msg_HMPPar);</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">    //  Higher level HMP</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">        if (count &lt;=1 &amp;&amp; obj_callback.HMP_initial_command_flag==true) {</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">            HMP_command_flag=false;</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">            obj_callback.HMP_ack_flag=false;</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">            HMP_count=count;</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">            paramHMP[0]=0.0;</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">            for (int ii=2; ii&lt;= noParamHMP; ii++) {</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">                 paramHMP[ii-1]=1.0/(1+ii);</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">             }</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">            obj_callback.NoParameterHMP=noParamHMP;</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">    // Flag check</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">        if (count&gt;=HMP_count+5 &amp;&amp; obj_callback.HMP_ack_flag==false) {</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">            HMP_command_flag=false;</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">            HMP_count=count;</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">     // Publish HMP Parameter Message</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">        if ( HMP_command_flag==false ) {</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">            std_msgs::String msg_HMPPar;</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">            std::stringstream ss_HMPPar;</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">            for (int ii=1; ii&lt;= noParamHMP; ii++) {</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">                ss_HMPPar&lt;&lt;paramHMP[ii-1]&lt;&lt;&quot; &quot;;</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">            cout&lt;&lt;endl;</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">            msg_HMPPar.data=ss_HMPPar.str();</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">            ROS_INFO(&quot;I publish HMP command: %s&quot;,msg_HMPPar.data.c_str());</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">            pub_HMP_cmnd.publish(msg_HMPPar);</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">            HMP_command_flag=true;</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">//***   Control     ***//</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">//  // Control Initial Parameters, maybe delete this part, maybe necessary later!</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">//      if (obj_callback.control_initial_command_flag==false) {</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">//          std_msgs::String msg_ctrlPar;</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">//          std::stringstream ss_ctrlPar;</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">//          for (int ii=1; ii&lt;= noParamCtrlInit; ii++) {</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">//              ss_ctrlPar&lt;&lt;paramCtrlInit[ii-1];</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">//          }</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">//          msg_ctrlPar.data=ss_ctrlPar.str();</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">//          ROS_INFO(&quot;I publish Control Initial command: %s&quot;,msg_ctrlPar.data.c_str());</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">//          pub_ctrl_cmnd.publish(msg_ctrlPar);</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="comment">//  Higher Level Control</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="comment">// in this if condition when the robot reaches the goal we check for the next action to do.</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="comment">//if ( obj_callback.control_ack_flag[i1]==true &amp;&amp;   obj_nodeAction.actionCommand[i1]!=&quot;0&quot; &amp;&amp; obj_nodeAction.actionCommand[1]!=&quot;0&quot; &amp;&amp; obj_callback.hri_control_goal_flag[0]==false &amp;&amp; obj_callback.hri_control_goal_flag[1]==true )</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="comment">/*  for (int i1=0;i1&lt;NO_ARMS;i1++)</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">            if ( obj_callback.control_ack_flag[i1]==true &amp;&amp; obj_nodeAction.actionCommand[i1]!=&quot;0&quot; &amp;&amp; obj_callback.hri_control_goal_flag[i1]==false  )</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">                msg_ctrl_cmnd[i1].data=obj_nodeAction.actionCommand[i1];</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">                control_command_flag[i1]=false;</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">                cout&lt;&lt;&quot;control_command_flag &quot;&lt;&lt;i1&lt;&lt;&quot;: &quot;&lt;&lt;control_command_flag[i1]&lt;&lt;endl;</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">                cout&lt;&lt;&quot;POINT 3&quot;&lt;&lt;endl;</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">            }*/</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        rob_goal_reach_flag_counter=0;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="keywordflow">if</span> (obj_callback.rob_goal_reach_flag[i1]==<span class="keyword">false</span> )</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                rob_goal_reach_flag_counter++;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">//      when: &quot;rob_goal_reach_flag_counter==NO_ARMS&quot; it means that both arms reached their goal</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">if</span>(rob_goal_reach_flag_counter==NO_ARMS_STATE &amp;&amp; Gesture_Flag_Resolved==<span class="keyword">true</span>)</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            obj_nodeAction.actionFlag=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                obj_callback.rob_goal_reach_flag[i1]=<span class="keyword">true</span>; </div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            obj_nodeAction.node_action_flag[obj_nodeAction.node_number][obj_nodeAction.actionNumber]=1;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            ms_robot_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            Myfile1 &lt;&lt;ms_robot_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;RobotStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">//          cout&lt;&lt;&quot;node_action_flag:&quot;&lt;&lt;endl;</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">//          for (int g1=0;g1&lt;(obj_nodeAction.Number_of_Nodes);g1++)</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">//              {for (int f1=0;f1&lt;(obj_nodeAction.nodeActionList_width);f1++)// No of hyper arcs again, not the nodes?</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">//                  cout&lt;&lt;&quot;\t&quot;&lt;&lt;obj_nodeAction.node_action_flag[g1][f1];</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">//              cout&lt;&lt;endl;</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">//              }</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        }</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(rob_goal_reach_flag_counter==NO_ARMS_STATE &amp;&amp; Gesture_Flag_Resolved==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                obj_callback.rob_goal_reach_flag[i1]=<span class="keyword">true</span>; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            ms_robot_stop= duration_cast&lt; microseconds &gt;(system_clock::now().time_since_epoch());</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            Myfile1 &lt;&lt;ms_robot_stop.count()&lt;&lt;<span class="stringliteral">&quot; &quot;</span>&lt;&lt;<span class="stringliteral">&quot;RobotStop&quot;</span>&lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            Gesture_Flag_Resolved=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">/*      if (obj_callback.rob_goal_reach_flag[0]==false &amp;&amp; obj_callback.rob_goal_reach_flag[1]==false &amp;&amp; Human_Gesture_Flag==false){</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">                obj_callback.rob_goal_reach_flag[0]=true; /// ??? check to be sure</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">                obj_callback.rob_goal_reach_flag[1]=true; /// ??? check to be sure</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">                Human_Gesture_Flag=true;</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">                obj_nodeAction.actionFlag=false;</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="comment">// for initial control checking</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">//      if (count&lt;= 1&amp;&amp; obj_callback.control_initial_command_flag==true){</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">//          control_command_flag[0]=false;</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">//          control_error_flag=false;</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">//          cout&lt;&lt;&quot;control_command_flag[0]: &quot;&lt;&lt;control_command_flag[0]&lt;&lt;endl;</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"></span><span class="comment">//          ///control_count=count;</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">//          for (int ii=1; ii&lt;= noParamCtrl; ii++) {</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">//               paramCtrl[ii-1]=0;</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment">//               ss_ctrl_cmnd&lt;&lt;paramCtrl[ii-1];</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">//           }</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">//          msg_ctrl_cmnd[0].data=ss_ctrl_cmnd.str();</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">//          msg_ctrl_err.data=ss_ctrl_cmnd.str();</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="comment">// Flag check</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="comment">// flag for checking if the controller reach the goal, wait for 10 sec(10sec*80 hz)</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            <span class="keywordflow">if</span> (count&gt;=control_goal_count[i1]+(max_time_rob_reach_goal*hri_ros_freq)</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    &amp;&amp; obj_callback.hri_control_goal_flag[i1]==<span class="keyword">false</span> &amp;&amp; obj_nodeAction.actionCommand[i1]!=<span class="stringliteral">&quot;0&quot;</span>)</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            {</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                control_command_flag[i1]=<span class="keyword">false</span>;<span class="comment">//*** make this flag false in real test</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                cout&lt;&lt;<span class="stringliteral">&quot;control_command_flag[&quot;</span>&lt;&lt;i1&lt;&lt;<span class="stringliteral">&quot;]: &quot;</span>&lt;&lt;control_command_flag[i1]&lt;&lt;endl;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                msg_ctrl_cmnd[i1].data=obj_nodeAction.actionCommand[i1];</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                obj_callback.hri_control_goal_flag[i1]=<span class="keyword">true</span>;<span class="comment">// not sure check later</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                <span class="comment">// check for receiving cmnd from hri -&gt; controller:</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">//              if (count&gt;=control_count[i1]+10 &amp;&amp;obj_callback.control_ack_flag[i1]==false)</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">//                  control_command_flag[i1]=false;//*** make this flag false in real test</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment"></span>                <span class="comment">/*      if (count&gt;=control_goal_count+(max_time_rob_reach_goal*hri_ros_freq)</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">                                            &amp;&amp; obj_callback.hri_control_goal_flag[1]==false &amp;&amp; obj_nodeAction.actionCommand[1]!=&quot;0&quot;)</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment">                            {</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">                                control_command_flag=true;//*** make this flag false in real test</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">                                cout&lt;&lt;&quot;control_command_flag8: &quot;&lt;&lt;control_command_flag&lt;&lt;endl;</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">                                msg_ctrl_cmnd.data=obj_nodeAction.actionCommand[1];</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">                                obj_callback.hri_control_goal_flag[1]=true;// not sure check later</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">                            }*/</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        }</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// Publish Control Message</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">//      if (count&lt;=1)</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">//      {</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1=0;i1&lt;NO_ARMS_STATE;i1++)</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">if</span> ( control_command_flag[i1]==<span class="keyword">false</span> ){</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                ROS_INFO(<span class="stringliteral">&quot;publish hri robot Command: %s&quot;</span>,msg_ctrl_cmnd[i1].data.c_str());</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                pub_ctrl_cmnd.publish(msg_ctrl_cmnd[i1]);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                control_command_flag[i1]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                obj_callback.hri_control_goal_flag[i1]=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                control_count[i1]=count;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                control_goal_count[i1]=count;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            }</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment">//          if ( control_error_flag==false )</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="comment">//          {</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment">//              //ROS_INFO(&quot;I publish Control error: %s&quot;,msg_ctrl_err.data.c_str());</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">//              pub_ctrl_error.publish(msg_ctrl_err);</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">//              control_error_flag=true;</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">//          }</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">if</span> (count==0){  usleep(0.5e6); }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        loop_rate.sleep();</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        ros::spinOnce();</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        count++;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    }</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div>
<div class="ttc" id="classAOgraph_xhtml"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml">AOgraph</a></div><div class="ttdoc">class &quot;AOgraph&quot; for the AND-OR graph </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00058">aograph.h:58</a></div></div>
<div class="ttc" id="classendorActionClass_xhtml"><div class="ttname"><a href="../../d7/dd2/classendorActionClass.xhtml">endorActionClass</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d14/endorAction_8hpp_source.xhtml#l00033">endorAction.hpp:33</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a45cf5748d787cfd255500471988479fc"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a45cf5748d787cfd255500471988479fc">AOgraph::loadFromFile</a></div><div class="ttdeci">string loadFromFile(string fileName)</div><div class="ttdoc">load the graph description from a file </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00525">aograph.cpp:525</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_ac3de5a6fa4472fac8eafbd1ba637c8bd"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#ac3de5a6fa4472fac8eafbd1ba637c8bd">AOgraph::solveByName</a></div><div class="ttdeci">void solveByName(string nameNode)</div><div class="ttdoc">solve a node, finding it by name </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00672">aograph.cpp:672</a></div></div>
<div class="ttc" id="classCallBackClass_xhtml"><div class="ttname"><a href="../../d1/dbb/classCallBackClass.xhtml">CallBackClass</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d3/df1/CallBackClass_8hpp_source.xhtml#l00020">CallBackClass.hpp:20</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a8a50311dd164df031938b1556c6ea57d"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a8a50311dd164df031938b1556c6ea57d">AOgraph::suggestNext</a></div><div class="ttdeci">string suggestNext(bool strategy)</div><div class="ttdoc">suggest the node to solve </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00637">aograph.cpp:637</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Sep 21 2017 11:52:31 for planner by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
